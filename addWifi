#!/usr/bin/env bash

CONFIG_FILE=/etc/wpa_supplicant/wpa_supplicant.conf
INTERFACE=wlp2s0

usage_exit() {
    echo -e "Usage: $0 [-h]\nThis command needs the root permission. Input SSID No. and Passphrase interactively, the WiFi is registered in wpa_supplicant.conf. If Passphrase is not given, the network is registered as the open network.
    -h    this help message is appeared"
    exit 1
}

wifi_register () {
    grep -o "ssid=\"$2\"" $1 > /dev/null # confirm that given SSID is not registered
    if [ $? -eq 0 ]; then
        echo "Given SSID \"$2\" is already registered! This program don't update wpa_supplicant.conf."
        exit 1
    fi

    if [ -z $PASS ]; then
        echo "WiFi Open network"
        echo "" >> $1
        echo -e "network={\nssid=\"$2\"\nkey_mgmt=NONE\n}" >> $1 && echo "SSID $2 was registered and you can connect."
    else
        TEMP=`wpa_passphrase $2 $3`
        if [ $? -eq 0 ]; then
            echo "" >> $1
            echo -e "$TEMP" >> $1  && echo "SSID $2 was registered and you can connect."
        else
            echo -e "$TEMP"
            exit 1
        fi
    fi
}

use_array() {
    local r=$( declare -p $1 )
    r=${r#declare\ -a\ *=}
    # Strip keys so printed definition will be a simple list (like when using
    # "${array[@]}").  One side effect of having keys in the definition is
    # that when appending arrays (i.e. `a1+=$( use_array a2 )`), values at
    # matching indices merge instead of pushing all items onto array.
    echo ${r//\[[0-9]\]=}
}

ssid_array () {
    local SSID
    while read line; do
        SSID+=("$line")
    done
    use_array SSID
    return 0
}

# check the help option
while getopts h OPT
do
    case $OPT in
        h) usage_exit
           ;;
        \?) usage_exit
            ;;
    esac
done
shift "$((OPTIND - 1))"

# check root priviledge
if [ `whoami` != "root" ]; then
    echo "Must be root privilege to configure wifi settings"
    exit 1
fi

# if needed, enable network adptor
ip link show|grep -i -P "$INTERFACE.*[,<]up[,>]" > /dev/null
if [ $? -ne 0 ]; then
    ip link set $INTERFACE up
fi

# scaned wifi is assigned on array
echo "Staring to scan WiFi ..."
eval SSID=`iw dev $INTERFACE scan|grep -io -E 'SSID: .*'|sed 's/SSID: //g'|ssid_array`

# display scaned wifi
end=$((${#SSID[@]}-1))
for int in `seq -s " " 0 $end`
do
    echo "$int: ${SSID[$int]}"
done

# choose SSID by inputing No.
echo -e -n "\nWhich SSID is registered? (input by No.) > "
read num
if ! [[ $num =~  ^[0-9]+$ ]]; then
    echo "Input integers!"
    exit 1
fi
if [ $num -lt 0 -o $end -lt $num  ]; then
    echo "Corresponding SSID is not existed!"
    exit 1
fi

# input passphrase
echo -n "Input passphrase (default NONE) > "
read PASS

# register wifi
wifi_register $CONFIG_FILE "${SSID[$num]}" $PASS
